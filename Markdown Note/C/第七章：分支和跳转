## 7.1 if语句

```
int i=1;
if(i){
	printf("成功执行");
}
```

if语句通用形式：

```
if(expression)
	statement;
```

if语句会判断括号里的表达式(expression)，如果表达式值为真，则执行if里面的语句(statement)，反之，表达式值为假，则不执行该语句；



#### 7.1.1 if else语句

```
int i=0;
if(i){
	printf("成功执行");
}else{
	printf("执行另一个");
}
```

if else语句的通用形式：

```
if(expression)
	statement1;
else
	statemen2;
```

同样的，if else语句会检查表达式的值，如果值为真，则执行语句1。反之执行语句2；

注意，与循环相同，如果要在if和else里执行多条语句，必须用花括号把这些语句括起来称为一个块：

下面的代码结构**违反**了C语法：

```
if(x>0)
	printf("Incerementing x:\n);
	x++;
else
	printf("x<=0 \n");
```

因为if和else之间只允许有一条语句（简单语句和复合语句）





#### 7.1.2 getchar()和putchar

**getchar()函数不带任何参数，他从输入队列中返回下一个字符**，如下面的语句读取下一个字符输入，并把该字符的值赋给变量ch:

```
ch = getchar();
```

该语句与下面的语句效果相同：

```
scanf("%c",&ch);
```



**putchar()函数打印它的参数**。

```
putchar(ch);
```

这两个只处理字符，比scanf()和printf()处理字符更快、更简洁。这两个函数通常定义在stdio.h头文件中（而且，它们通常是预处理宏，而不是真正的函数，第十六章会讨论类似函数的宏）



该程序把一行输入程序打印出来，但是每个非空格都被替换成原字符在ASCII序列的下一个字符，空格不变。这一过程可描述为：“如果字符是空白，原样打印；否则，打印原字符在ASCII序列中的下一个字符”

```
#include<stdio.h>
int main() {
	char ch;
	printf("请输入一串字符：");
	ch = getchar(); //从输入流中获取第一个字符

	while (ch != '\n') {  //当字符不是换行符是执行循环，即第一行未结束
		if (ch == ' ')
			putchar(ch);
		else
			putchar(ch + 1);
		ch = getchar(); //继续从输入流中获取字符
	}
	
	return 0;
}
```

输出：

```
请输入一串字符：ABCD EFG
BCDE FGH
```



#### 7.1.3ctype.h系列的字符函数

ctype.h头文件包含了一系列处理字符的函数。这些函数接受一个字符作为参数，如果该字符属于某特殊的类别，就返回一个非零值（真）；否则返回0（假）。例

isalpha()函数的用于判断参数是不是字母，如果是，就返回真。我们使用这个函数优化上一个程序，还优化了循环的表达式部分。

```
#include<stdio.h>
#include<ctype.h>
int main() {
	char ch;
	printf("请输入一串字符："); 

	while ((ch = getchar())!= '\n') {  //当字符不是换行符是执行循环，即第一行未结束
		if (isalpha(ch))
			putchar(ch+1);
		else
			putchar(ch);
	}
	
	return 0;
}
```

输出：

```
#include<stdio.h>
#include<ctype.h>
int main() {
	char ch;
	printf("请输入一串字符："); 

	while ((ch = getchar())!= '\n') {  //当字符不是换行符是执行循环，即第一行未结束
		if (isalpha(ch))
			putchar(ch+1);
		else
			putchar(ch);
	}
	
	return 0;
}

```

输出：

```
请输入一串字符：Look!is't a programmer!
Mppl!jt'u b qsphsbnnfs!
```



该程序除了字母被替换，其他字符都原样输出



#### 表7.1 ctype.h头文件中的字符测试函数

| 函数名     | 如果是下列参数时，返回值为真                                 |
| ---------- | ------------------------------------------------------------ |
| isalnum()  | 字母数字（字母或数字）                                       |
| isalpha()  | 字母                                                         |
| isblank()  | 标准的空白字符（空格、水平制表符或换行符）或任何其他本地化指定为空白的字符 |
| iscntrl()  | 控制字符，如Ctrl+B                                           |
| isdigit()  | 数字                                                         |
| isgraph()  | 除空格之外的任意可打印字符                                   |
| islower()  | 小写字母                                                     |
| isprintf() | 可打印字符（可打印字符的ASCII码范围是从32到126）             |
| ispunct()  | 标点符号（除空格或字母数字字符意外的任何打印字符）           |
| isspace()  | 空白字符（空格、换行符、换页符、回车符、垂直制表符、水平制表符或） |
| isupper()  | 大写字母                                                     |
| isxdigit() | 十六进制字符                                                 |

#### 表7.2ctype.h头文件中的字符映射函数

| 函数名    | 行为                                                       |
| --------- | ---------------------------------------------------------- |
| tolower() | 如果参数是大写字符，该函数返回小写字符；否则，返回原始参数 |
| toupper() | 如果参数是小写字符，该函数返回大写字符；否则，返回原始参数 |

注意，字符映射函数不会修改原始的参数，这些函数只会返回已修改的值。下面的语句不改变ch的值：

```
tolower(ch);  //不影响ch的值
```

这样做才会改变ch的值：

```
ch = tolower(ch);  //把ch转换成小写字母
```



#### 7.1.4多重选择 else if

我们可以使用else if模拟多重选择的情况。

```c
#include<stdio.h>
#include<ctype.h>
int main() {
	int score;
	printf("请输入成绩：");
	scanf_s("%d", &score);
	if (score <= 100 && score >= 90) {
		printf("成绩优良");
	}
	else if (score < 90 && score >= 80) {
		printf("成绩良");
	}
	else if (score < 80 && score >= 70) {
		printf("成绩一般");
	}
	else if(score <70 && score >= 60) {
		printf("成绩合格");
	}
	else {
		printf("成绩不合格");
	}
}
```

程序会从上到下执行if,当遇见符合条件的if就会执行里面的执行里面的语句，并跳过后面的if判断。如当我输入60时，程序先判断它是不是在90-100，再判断是不是在80-89；在判断是不是在70-79；再判断是不是在60-69，符合条件，执行里面的语句。最后的else则不会执行；



7.1.5 else与if配对

如果程序中有多个if和else，编译器如何知道哪个if对应哪个else?例如，考虑下面的程序段：

```c
if(number>6)
	if(number<12)
		printf("You're close!\n");
else
	printf("Sorry,you lose a turn!\n");
```

else 与第2个if匹配。也就是说，输入15，会输出Sorry,you lose a turn!

**规则是，如果没有花括号，else离它最近的if匹配，除非最近的if被花括号括起来**

else 与最近的if匹配

```c
if(条件)
	语句
	
if(条件)   //匹配else
	语句
	
else       //匹配if
	语句
```

else与内含if语句第1个if语句匹配

```c
if(条件)   //匹配else
{
	语句
	
	if(条件)
	语句

}
else   //匹配if
	语句
```

**可以有单独的if,不能有单独的else， else必须和if成套出现**



#### 7.1.5 多层嵌套的if

有时，选择一个特定选项后又引出其他选择，这种情况可以使用另一种嵌套if，即if里面还有if

把这种形式的嵌套if应用在下面的程序中。给定一个整数，显示所有能整除它的约数。如果没有约数，则报告该数是一个素数。

*约数：又称因数，整数a除以整数b(b!=0)除得的商正好是整数而没有余数，就说a能被b整除，或b能正常除a，a称为b的倍数，b称为a的约数*

*素数：又称质数，一个大于1的自然数，除了1和它本身外，不能被其他自然数整除的数叫做质数；（1不是质数）*

```c
#include<stdio.h>
int main() {
	int num = 0;
	printf("输入一个整数：");
	scanf_s("%d", &num);

	for (int div = 2;div < num;div++) {
		if (num % div == 0) {  //a能被b整除，则说明b是a的约数
			printf("%d是%d的约数\n", div, num);
		}
	}
	printf("%d是一个素数",num);
}
```



判断一个数是不是素数则与上面类似，素数只能被1和本身整除，所以我们同样使用循环判断它能不能被整除

```c
#include<stdio.h>
int main() {
	int num = 0;
	bool issushu = true;  //素数标记
	
	printf("请输入一个整数：");
	while (scanf_s("%d", &num) == 1) {  //输入成功，返回1
		for (int i = 2;i < num;i++) {
			if (num % i == 0) {
				issushu = false;
				break;
			}
		}
		if (issushu)
			printf("%d是素数\n", num);
		else
			printf("%d不是素数\n", num);
		printf("请输入下一个整数：");z
	}

}
```

我们继续改良这个程序，让程序输入两个整数，然后判断两个整数之间的素数有多少个,并将他们输出出来

```c
#include<stdio.h>
int main() {
	int num1;
	int num2;
	bool isPrime=true; //素数判断依据
	int Prime[100];
	scanf_s("%d %d", &num1, &num2);
	int count=0; //素数个数依据
	if (num1 > num2)//设定num1为小值
	{
		int temp = num1;
		num1 = num2;
		num2 = temp;
	}

	for (int i = num1;i <=num2;i++) { //让这个循环从数a走到数b
		isPrime = true;
		//这个循环从2走到i，依次判断i能不能被整除,并且第一次执行循环时初始化isprimer为真
		for (int j = 2;j<i;j++){
			if (i % j == 0) { //如果i值能被j整除，则说明i值不是素数，将标记为false
				isPrime = false;
				break;
			}
		}
		//如果循环执行完之后isPrime的值还没被修改，说明这个i值不能被j整除;
		if (isPrime) {
			Prime[count] = i;
			count++;
		}
		
	}
	printf("%d到%d的素数有%d个\n", num1, num2, count);
	printf("分别是：");
	for (int i = 0;i< count;i++) {
		printf("%d ", Prime[i]);
	}

}
```





## 7.2 逻辑运算符

C语言有三种逻辑运算符

| 逻辑运算符 | 含义 |
| ---------- | ---- |
| &&         | 与   |
| \|\|       | 或   |
| ！         | 非   |

假设exp1和exp2是两个简单的关系表达式；那么：

1. 当且仅当exp1和exp2都为真时，exp1&&exp2才为真；
2. 如果exp1或exp2为真，则exp1||exp2为真；
3. 如果exp1为假，则!exp1为真，如果exp1为真，则!exp1为假；



#### 7.2.1 备选拼写：iso646.h头文件

c99标准新增了可代替逻辑运算符的拼写，它们被定义在iso646.h头文件中。如果在程序中包含该头文件，便可

用and代替&&  ,or代替||, not代替！。例如，可以把下面的代码：

```c
if(ch!='"' && ch !='\'');
改写为：
if(ch!='"' and ch !='\'')
```





#### 7.2.2 范围

&&运算符可用于描述范围，例如，90~100之间：

```c
if(score>=90&& score>=100)
```

不要模仿数学上的写法：

```c
if(90<=score<=100)
```

这样写的问题是代码有语义错误，而不是语法错误。由于<=运算符的求值顺序是从左往右的，所以表达式解释为：

(90<=socre)<=100;





## 7.3 一个统计单词的程序

现在我们可以编写一个统计单词数量的程序（即，该程序读取并报告单词的数量）该程序还可以计算字符数和行数。

```c
#include<stdio.h>
#include<ctype.h>
#define STOP '|'
//统计输入的字符数，单词数，行数。
int main() {
	char c;
	long n_chars = 0L;
	int n_lines = 0;
	int n_words = 0;
	int p_lines = 0;
	bool inword = false;

	printf("请输入一些字符");

	while ((c = getchar()) != STOP) {
		n_chars++;
		if (c == '\n')
			n_lines++;

		if (!isspace(c) && !inword)  //计算单词
		{
			inword = true;
			n_words++;
		}

		if (isspace(c) && inword)
			inword = false;
	}

	printf("characters = %d,words = %d lines = %d",
		n_chars, n_words, n_lines);
}
```





## 7.4 条件运算符：  ?:

C提供条件表达式作为表达if else语句的一种便捷方式，该表达式实用:?条件运算符。为三元运算符（或三目），需要三个运算对象。下面的代码得到一个数的绝对值：

``` c
x= (y<0)?-y:y；
```

该语句的意思是，如果y小于0，那么x=-y，否则x=y;转为if语句可以这样表达：

```c
if(y<0)
    x=-y;
else
    x=y;
```

条件表达式的通用形式如下：

```c
expression1 ? expression2:exression3
```





## 7.5 循环辅助：continue和break;

continue和break语句可以根据循环体中的测试结果来忽略一部分循环，甚至结束循环；



#### 7.5.1 continue语句

循环都可以使用continue语句。执行到该语句时，会跳过本次迭代的剩余部分，并开始下一轮迭代

```c
#include<stdio.h>
int main() {
	//定义常量限制最大值和最小值
	const int MIN = 0;
	const int  MAX = 100;  

	int score = 0; //分数
	int total = 0; //分数总和
	
	while (printf("请输入一个整数："), scanf_s("%d", &score) == 1) {  //当输入非数字字符时停止循环
		if (score<MIN || score>MAX) {
			printf("%d 是非法输入，请重新输入\n", score);
			continue;
		}
		total += score;
	}
	printf("最后的总和是%d", total);
}
```



#### 7.5.2 break语句

程序执行到循环中break语句时，会终止包含它的循环，并执行下一阶段，如果break语句位于嵌套循环内，它只会影响包含它的当前循环

下面的程序用循环计算矩形的面积，如果用户输入非数字作为矩形的长或宽。则终止循环

```c
#include<stdio.h>
int main() {
	double length, width;
	printf("请先输入长度以计算面积:");
	while (scanf_s("%lf", &length) == 1) {
		printf("长度：%.2lf\n", length);
		printf("请输入宽度:");

		//如果输入不是数字
		if (scanf_s("%lf", &width) != 1) {
			break; //结束循环
		}
		printf("宽度：%.2lf\n", width);
		printf("面积：%.3lf\n", length * width);
		printf("请继续输入长度以计算面积\n");
	}
	printf("输入数据有误，程序结束\n");

}
```





## 7.6 多重选择：switch和break

前面讲到，程序面临多个选择时，可以使用if else if else if... else来完成，但是，大多数情况下使用swtich语句更方便,该程序读入一个字母，然后打印出以该字母开头的动物名

```c
#include<stdio.h>
#include<ctype.h>
int main() {
	char ch;
	printf("请你输入一个字符，输入#结束程序\n");

	while ((ch = getchar()) != '#') //从输入流读入一个字符，该字符不是#就执行循环
	{
		if (ch == '\n') //如果该字符是换行符，则跳过该次循环
			continue;
		ch = tolower(ch);//将大写字母转换为小写
			switch (ch)
			{
			case 'a':
				printf("argli,a wild sheep of Asia\n");
				break;
			case 'b':
				printf("babirusa, a wild pig of Malay\n");
				break;
			case 'c':
				printf("coati,racoonlike mamal\n");
				break;
			case 'e':
				printf("echidna,the spiny anterter\n");
				break;
			default:
				printf("That's a stumper!\n");
			}
	}
	printf("Done!");
}
```



#### 7.6.1 switch语句

switch在圆括号中的测试表达式的值应该是一个整数值（包括char类型）。case标签必须是整数类型（包括char类型）的常量或整型常量表达式（即表达式中只包含整型常量）。不能用变量作为case标签。

switch的构造如下：

```c
switch(整型表达式)
{
        case 常量1：
            语句     <--可选
        case 常量2：
            语句     <--可选
       	default:
        	语句     <--可选
}
```

swtich对圆括号中的表达式求值。然后依次扫描标签（这里指：case 'a':、 case ‘b’等）列表，直到发现一个匹配的值为止，然后程序跳转至那一行。如果没有匹配的标签怎么办？如果有default：标签行，就跳转至该行，否则程序继续执行在switch后面的语句；

break让程序离开switch语句，跳至switch语句后面的下一条语句。如果没有break语句，就会从匹配标签开始执行到switch末尾。





## 7.7 goto语句

goto语句有两部分：goto和标签名。标签的命名遵循变量名贵州，如下所示：

goto part2;

要让这条语句正常工作，函数还必须包含另一条表位part2的语句：

```c
part2:printf("这是goto语句")；
```



#### 7.7.1 避免使用goto

原则上，根本不用再C重新中goto语句，先描述一些使用goto的常见情况，再介绍C的解决方案

```c
if(size>12)
    goto a;
goto b;
a:cost = cost*1.05;
flag=2;
b:bill = cost *flag;
```

我们把以上模式转换成等价的C代码

```c
if(size>12){
    cost = cost*1.05;
    flag = 2;
}
bill = cost *flag;
```



## 7.8 编程练习

1. 编写一个程序读取输入，读到#字符停止，然后报告读取的空格数、换行符数和所有其他字符的数量

   ```c
   #include<stdio.h>
   
   int main()
   {
   	char ch;
   	int isspace_n = 0;
   	int ishuanhang = 0;
   	int char_n = 0;
   	printf("请输入字符：");
   	while ( (ch = getchar()) != '#') {
   		if (ch == ' ') {
   			isspace_n++;
   		}else if (ch == '\n') {
   			ishuanhang++;
   		}
   		else {
   			char_n++;
   		}
   	}
   	printf("其他字符数：%d，空格数：%d,换行数：%d", char_n, isspace_n, ishuanhang);
   }
   ```

   
